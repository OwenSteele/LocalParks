@model ICollection<ParkEventModel>
@inject IAuthenticationService service
@{
    ViewData["Title"] = "Events";
}

@section scripts {
    <partial name="_ValidationScriptsPartial" />
    <script src="~/js/filtering.js"></script>
}
<div class="events-jumbotron-img row">
    <ul class="w-100 list-unstyled d-flex flex-row justify-content-between flex-wrap">
        <li class="flex-column position-relative">
            <h1 class="p-1 pr-3 pl-3 bg-light rounded">Upcoming events</h1>
        </li>
        <li class="flex-column position-relative">
            @if (await service.IsSignedInAsync(User))
            {
                <h3>
                    <input class="btn-dark w3-hover-border-amber w3-hover-text-amber rounded btn-group-lg p-1"
                           type="button"
                           value="Schedule"
                           onclick="location.href='@Url.Action("Edit", "ParkEvents")'" />
                </h3>
            }
            else
            {
                <h3>
                    <input class="btn-dark w3-hover-border-amber w3-hover-text-amber rounded btn-group-lg p-1"
                           type="button"
                           value="Log in to schedule"
                           onclick="location.href='@Url.Action("Login", "Account",
                                      new { returnUrl = Url.Action("Edit", "ParkEvents")})'" />
                </h3>
            }
        </li>
    </ul>
</div>

<partial name="_FilterBar" />

<div class="bg-info border-dark text-dark w-auto rounded text-center m-1">Viewing <strong>@Model.Count()</strong> upcoming events.</div>


@foreach (var ev in Model)
{
    <partial name="_Summary" model="ev" />
}