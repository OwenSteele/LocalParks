// <auto-generated />
using System;
using LocalParks.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace LocalParks.Data.Migrations
{
    [DbContext(typeof(ParkContext))]
    [Migration("20210124130838_LocalParks3")]
    partial class LocalParks3
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("LocalParks.Core.Event", b =>
                {
                    b.Property<int>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrganiserEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrganiserFirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrganiserLastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrganiserPhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParkId")
                        .HasColumnType("int");

                    b.HasKey("EventId");

                    b.HasIndex("ParkId");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            EventId = 1,
                            Date = new DateTime(2021, 8, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "A fair for everyone, for hobbyists and professionals to come together and meet.",
                            Name = "Arts and Crafts Fair",
                            OrganiserEmail = "JoanRoberts@owensteele.co.uk",
                            OrganiserFirstName = "Joan",
                            OrganiserLastName = "Roberts",
                            OrganiserPhoneNumber = "07123456789",
                            ParkId = 1
                        },
                        new
                        {
                            EventId = 2,
                            Date = new DateTime(2021, 6, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Come and race other from the village, egg and spoons provided!",
                            Name = "Egg and Spoon Race",
                            OrganiserEmail = "DanJackson@owensteele.co.uk",
                            OrganiserFirstName = "Dan",
                            OrganiserLastName = "Jackson",
                            OrganiserPhoneNumber = "0700345876",
                            ParkId = 2
                        },
                        new
                        {
                            EventId = 3,
                            Date = new DateTime(2021, 7, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Come and adopt a new feline or canine friend, all looking for good homes.",
                            Name = "Pet adoption Clinic",
                            OrganiserEmail = "MarkDavis@owensteele.co.uk",
                            OrganiserFirstName = "Mark",
                            OrganiserLastName = "Davis",
                            OrganiserPhoneNumber = "01196596691",
                            ParkId = 2
                        });
                });

            modelBuilder.Entity("LocalParks.Core.Park", b =>
                {
                    b.Property<int>("ParkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("ClosingTime")
                        .HasColumnType("datetime2");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OpeningTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Postcode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SizeInMetresSquared")
                        .HasColumnType("int");

                    b.HasKey("ParkId");

                    b.ToTable("Parks");

                    b.HasData(
                        new
                        {
                            ParkId = 1,
                            ClosingTime = new DateTime(2021, 1, 1, 19, 0, 0, 0, DateTimeKind.Unspecified),
                            Latitude = 0.38475599999999999,
                            Longitude = 40.348570000000002,
                            Name = "Leafy Meadows",
                            OpeningTime = new DateTime(2021, 1, 1, 7, 0, 0, 0, DateTimeKind.Unspecified),
                            Postcode = "LP4",
                            SizeInMetresSquared = 200000
                        },
                        new
                        {
                            ParkId = 2,
                            ClosingTime = new DateTime(2021, 1, 1, 22, 0, 0, 0, DateTimeKind.Unspecified),
                            Latitude = 0.18798000000000001,
                            Longitude = 38.8765,
                            Name = "Middlesbrook Park",
                            OpeningTime = new DateTime(2021, 1, 1, 6, 0, 0, 0, DateTimeKind.Unspecified),
                            Postcode = "PF15",
                            SizeInMetresSquared = 85000
                        });
                });

            modelBuilder.Entity("LocalParks.Core.SportsClub", b =>
                {
                    b.Property<int>("ClubId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Members")
                        .HasColumnType("int");

                    b.Property<double>("MembershipFee")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParkId")
                        .HasColumnType("int");

                    b.Property<string>("President")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Sport")
                        .HasColumnType("int");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClubId");

                    b.HasIndex("ParkId");

                    b.ToTable("SportsClubs");

                    b.HasData(
                        new
                        {
                            ClubId = 1,
                            Email = "CPCPolo@owensteele.co.uk",
                            Members = 103,
                            MembershipFee = 20000.0,
                            Name = "Curling Polo Club",
                            ParkId = 1,
                            President = "Matthrew Albright",
                            Sport = 0,
                            Website = "CPCPolo-OS.co.uk"
                        },
                        new
                        {
                            ClubId = 2,
                            Email = "Contact.Meadow-Rugby@owensteele.co.uk",
                            Members = 20,
                            MembershipFee = 150.0,
                            Name = "Meadow RFC",
                            ParkId = 1,
                            President = "Jess Hampston",
                            Sport = 2,
                            Website = "Meadow-Rugby-OS.co.uk"
                        },
                        new
                        {
                            ClubId = 3,
                            Email = "Admin.ChesterlyCricket@owensteele.co.uk",
                            Members = 67,
                            MembershipFee = 330.0,
                            Name = "Chesterly Cricket Club",
                            ParkId = 2,
                            President = "Linda Paul",
                            Sport = 8,
                            Website = "ChesterlyCricketClub-OS.co.uk"
                        });
                });

            modelBuilder.Entity("LocalParks.Core.Supervisor", b =>
                {
                    b.Property<int>("SupervisorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("EmergencyNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Office")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ParkRef")
                        .HasColumnType("int");

                    b.Property<double>("Salary")
                        .HasColumnType("float");

                    b.Property<DateTime>("StartingDate")
                        .HasColumnType("datetime2");

                    b.HasKey("SupervisorId");

                    b.HasIndex("ParkRef")
                        .IsUnique();

                    b.ToTable("Supervisors");

                    b.HasData(
                        new
                        {
                            SupervisorId = 1,
                            EmergencyNumber = "07654321000",
                            FirstName = "Joe",
                            LastName = "Bloggs",
                            Office = "123 Chestnut Drive",
                            ParkRef = 1,
                            Salary = 35000.0,
                            StartingDate = new DateTime(1980, 7, 13, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            SupervisorId = 2,
                            EmergencyNumber = "07685940321",
                            FirstName = "Anne",
                            LastName = "Smith",
                            Office = "Parkside Cottage, Park Avenue",
                            ParkRef = 2,
                            Salary = 32000.0,
                            StartingDate = new DateTime(1960, 1, 21, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("LocalParks.Core.Event", b =>
                {
                    b.HasOne("LocalParks.Core.Park", "Park")
                        .WithMany("Events")
                        .HasForeignKey("ParkId");

                    b.Navigation("Park");
                });

            modelBuilder.Entity("LocalParks.Core.SportsClub", b =>
                {
                    b.HasOne("LocalParks.Core.Park", "Park")
                        .WithMany("SportClubs")
                        .HasForeignKey("ParkId");

                    b.Navigation("Park");
                });

            modelBuilder.Entity("LocalParks.Core.Supervisor", b =>
                {
                    b.HasOne("LocalParks.Core.Park", "Park")
                        .WithOne("Supervisor")
                        .HasForeignKey("LocalParks.Core.Supervisor", "ParkRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Park");
                });

            modelBuilder.Entity("LocalParks.Core.Park", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("SportClubs");

                    b.Navigation("Supervisor");
                });
#pragma warning restore 612, 618
        }
    }
}
